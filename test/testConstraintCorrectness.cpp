//
// Created by vitowu on 6/14/20.
//

#include <iostream>
#include <assert.h>

typedef unsigned int u32;
typedef unsigned long long u64;
#define ROR32(x, a) (((x)>>(a))|((x)<<(32-(a))))
#define RC1 0x80000000
#define RC2 0x41010000
#define RC3 0x51010000
#define RC4 0x00010001


int main() {
    //1st round
    u32 A_1_0[5][5];
    A_1_0[0][0] = 0x00000000;
    A_1_0[0][1] = 0x00000000;
    A_1_0[0][2] = 0xffffffff;
    A_1_0[0][3] = 0xffffffff;
    A_1_0[0][4] = 0x00000000;
    A_1_0[1][0] = 0x00000000;
    A_1_0[1][1] = 0x00000000;
    A_1_0[1][2] = 0xffffffff;
    A_1_0[1][3] = 0xffffffff;
    A_1_0[1][4] = 0x00000000;
    A_1_0[2][0] = 0x00000000;
    A_1_0[2][1] = 0x00000000;
    A_1_0[2][2] = 0x00000000;
    A_1_0[2][3] = 0xffffffff;
    A_1_0[2][4] = 0x00000000;
    A_1_0[3][0] = 0xffffffff;
    A_1_0[3][1] = 0xffffffff;
    A_1_0[3][2] = 0xffffffff;
    A_1_0[3][3] = 0x00000000;
    A_1_0[3][4] = 0x00000000;
    A_1_0[4][0] = 0xffffffff;
    A_1_0[4][1] = 0x00000000;
    A_1_0[4][2] = 0xffffffff;
    A_1_0[4][3] = 0xffffffff;
    A_1_0[4][4] = 0x00000000;

    // set constraints
    assert(A_1_0[0][4] == 0);
    assert(A_1_0[1][4] == 0);
    assert(A_1_0[2][4] == 0);
    assert(A_1_0[3][4] == 0);
    assert(A_1_0[4][4] == 0);
    assert((A_1_0[4][3] & 0x3) == 0x3);

    u32 A_1_1[5][5];
    for (int j = 0; j < 5; j++) {
        A_1_1[0][j] = A_1_0[0][j] ^ A_1_0[4][0] ^ A_1_0[4][1] ^ A_1_0[4][2] ^ A_1_0[4][3] ^ A_1_0[4][4] ^
                      ROR32((A_1_0[1][0] ^ A_1_0[1][1] ^ A_1_0[1][2] ^ A_1_0[1][3] ^ A_1_0[1][4]), 1);
        A_1_1[1][j] = A_1_0[1][j] ^ A_1_0[0][0] ^ A_1_0[0][1] ^ A_1_0[0][2] ^ A_1_0[0][3] ^ A_1_0[0][4] ^
                      ROR32((A_1_0[2][0] ^ A_1_0[2][1] ^ A_1_0[2][2] ^ A_1_0[2][3] ^ A_1_0[2][4]), 1);
        A_1_1[2][j] = A_1_0[2][j] ^ A_1_0[1][0] ^ A_1_0[1][1] ^ A_1_0[1][2] ^ A_1_0[1][3] ^ A_1_0[1][4] ^
                      ROR32((A_1_0[3][0] ^ A_1_0[3][1] ^ A_1_0[3][2] ^ A_1_0[3][3] ^ A_1_0[3][4]), 1);
        A_1_1[3][j] = A_1_0[3][j] ^ A_1_0[2][0] ^ A_1_0[2][1] ^ A_1_0[2][2] ^ A_1_0[2][3] ^ A_1_0[2][4] ^
                      ROR32((A_1_0[4][0] ^ A_1_0[4][1] ^ A_1_0[4][2] ^ A_1_0[4][3] ^ A_1_0[4][4]), 1);
        A_1_1[4][j] = A_1_0[4][j] ^ A_1_0[3][0] ^ A_1_0[3][1] ^ A_1_0[3][2] ^ A_1_0[3][3] ^ A_1_0[3][4] ^
                      ROR32((A_1_0[0][0] ^ A_1_0[0][1] ^ A_1_0[0][2] ^ A_1_0[0][3] ^ A_1_0[0][4]), 1);
    }

    u32 A_1_2[5][5];
    A_1_2[0][0] = A_1_1[0][0];
    A_1_2[0][1] = ROR32(A_1_1[3][0], 28);
    A_1_2[0][2] = ROR32(A_1_1[1][0], 1);
    A_1_2[0][3] = ROR32(A_1_1[4][0], 27);
    A_1_2[0][4] = ROR32(A_1_1[2][0], 30);
    A_1_2[1][0] = ROR32(A_1_1[1][1], 12);
    A_1_2[1][1] = ROR32(A_1_1[4][1], 20);
    A_1_2[1][2] = ROR32(A_1_1[2][1], 6);
    A_1_2[1][3] = ROR32(A_1_1[0][1], 4);
    A_1_2[1][4] = ROR32(A_1_1[3][1], 23);
    A_1_2[2][0] = ROR32(A_1_1[2][2], 11);
    A_1_2[2][1] = ROR32(A_1_1[0][2], 3);
    A_1_2[2][2] = ROR32(A_1_1[3][2], 25);
    A_1_2[2][3] = ROR32(A_1_1[1][2], 10);
    A_1_2[2][4] = ROR32(A_1_1[4][2], 7);
    A_1_2[3][0] = ROR32(A_1_1[3][3], 21);
    A_1_2[3][1] = ROR32(A_1_1[1][3], 13);
    A_1_2[3][2] = ROR32(A_1_1[4][3], 8);
    A_1_2[3][3] = ROR32(A_1_1[2][3], 15);
    A_1_2[3][4] = ROR32(A_1_1[0][3], 9);
    A_1_2[4][0] = ROR32(A_1_1[4][4], 14);
    A_1_2[4][1] = ROR32(A_1_1[2][4], 29);
    A_1_2[4][2] = ROR32(A_1_1[0][4], 18);
    A_1_2[4][3] = ROR32(A_1_1[3][4], 24);
    A_1_2[4][4] = ROR32(A_1_1[1][4], 2);

    // set constraints
    assert(A_1_2[1][0] == 0xFFFFFFFF);
    assert(A_1_2[1][1] == 0xFFFFFFFF);
    assert(A_1_2[1][2] == 0xFFFFFFFF);
    assert(A_1_2[1][3] == 0xFFFFFFFF);
    assert(A_1_2[1][4] == 0xFFFFFFFF);
    assert(A_1_2[3][0] == 0);
    assert(A_1_2[3][1] == 0);
    assert(A_1_2[3][2] == 0);
    assert(A_1_2[3][3] == 0);
    assert(A_1_2[3][4] == 0);
    assert(A_1_2[4][0] == A_1_2[0][0]);
    assert(A_1_2[4][1] == A_1_2[0][1]);
    assert(A_1_2[4][2] == A_1_2[0][2]);
    assert(A_1_2[4][3] == A_1_2[0][3]);
    assert(A_1_2[4][4] == A_1_2[0][4]);

    //2nd round
    u32 A_2_0[5][5];
    A_2_0[0][0] = A_1_2[0][0] ^ RC1;
    A_2_0[1][0] = 0xFFFFFFFF;
    A_2_0[2][0] = A_1_2[0][0] ^ A_1_2[2][0];
    A_2_0[3][0] = 0;
    A_2_0[4][0] = 0xFFFFFFFF;
    A_2_0[0][1] = A_1_2[0][1];
    A_2_0[1][1] = 0xFFFFFFFF;
    A_2_0[2][1] = A_1_2[0][1] ^ A_1_2[2][1];
    A_2_0[3][1] = 0;
    A_2_0[4][1] = 0xFFFFFFFF;
    A_2_0[0][2] = A_1_2[0][2];
    A_2_0[1][2] = 0xFFFFFFFF;
    A_2_0[2][2] = A_1_2[0][2] ^ A_1_2[2][2];
    A_2_0[3][2] = 0;
    A_2_0[4][2] = 0xFFFFFFFF;
    A_2_0[0][3] = A_1_2[0][3];
    A_2_0[1][3] = 0xFFFFFFFF;
    A_2_0[2][3] = A_1_2[0][3] ^ A_1_2[2][3];
    A_2_0[3][3] = 0;
    A_2_0[4][3] = 0xFFFFFFFF;
    A_2_0[0][4] = A_1_2[0][4];
    A_2_0[1][4] = 0xFFFFFFFF;
    A_2_0[2][4] = A_1_2[0][4] ^ A_1_2[2][4];
    A_2_0[3][4] = 0;
    A_2_0[4][4] = 0xFFFFFFFF;

//    u32 Alpha = 0;
//    u32 Beta = 0xFFFFFFFF;
//    // set constraints
//    assert(A_2_0[0][0] ^ A_2_0[0][1] ^ A_2_0[0][2] ^ A_2_0[0][3] ^ A_2_0[0][4] == Alpha);
//    assert(A_2_0[2][0] ^ A_2_0[2][1] ^ A_2_0[2][2] ^ A_2_0[2][3] ^ A_2_0[2][4] == Beta);

    u32 A_2_1[5][5];
    for (int j = 0; j < 5; j++) {
        A_2_1[0][j] = A_2_0[0][j] ^ A_2_0[4][0] ^ A_2_0[4][1] ^ A_2_0[4][2] ^ A_2_0[4][3] ^ A_2_0[4][4]
                      ^ ROR32((A_2_0[1][0] ^ A_2_0[1][1] ^ A_2_0[1][2] ^ A_2_0[1][3] ^ A_2_0[1][4]), 1);
        A_2_1[1][j] = A_2_0[1][j] ^ A_2_0[0][0] ^ A_2_0[0][1] ^ A_2_0[0][2] ^ A_2_0[0][3] ^ A_2_0[0][4]
                      ^ ROR32((A_2_0[2][0] ^ A_2_0[2][1] ^ A_2_0[2][2] ^ A_2_0[2][3] ^ A_2_0[2][4]), 1);
        A_2_1[2][j] = A_2_0[2][j] ^ A_2_0[1][0] ^ A_2_0[1][1] ^ A_2_0[1][2] ^ A_2_0[1][3] ^ A_2_0[1][4]
                      ^ ROR32((A_2_0[3][0] ^ A_2_0[3][1] ^ A_2_0[3][2] ^ A_2_0[3][3] ^ A_2_0[3][4]), 1);
        A_2_1[3][j] = A_2_0[3][j] ^ A_2_0[2][0] ^ A_2_0[2][1] ^ A_2_0[2][2] ^ A_2_0[2][3] ^ A_2_0[2][4]
                      ^ ROR32((A_2_0[4][0] ^ A_2_0[4][1] ^ A_2_0[4][2] ^ A_2_0[4][3] ^ A_2_0[4][4]), 1);
        A_2_1[4][j] = A_2_0[4][j] ^ A_2_0[3][0] ^ A_2_0[3][1] ^ A_2_0[3][2] ^ A_2_0[3][3] ^ A_2_0[3][4]
                      ^ ROR32((A_2_0[0][0] ^ A_2_0[0][1] ^ A_2_0[0][2] ^ A_2_0[0][3] ^ A_2_0[0][4]), 1);
    }

    u32 A_2_2[5][5];
    A_2_2[0][0] = A_2_1[0][0];
    A_2_2[0][1] = ROR32(A_2_1[3][0], 28);
    A_2_2[0][2] = ROR32(A_2_1[1][0], 1);
    A_2_2[0][3] = ROR32(A_2_1[4][0], 27);
    A_2_2[0][4] = ROR32(A_2_1[2][0], 30);
    A_2_2[1][0] = ROR32(A_2_1[1][1], 12);
    A_2_2[1][1] = ROR32(A_2_1[4][1], 20);
    A_2_2[1][2] = ROR32(A_2_1[2][1], 6);
    A_2_2[1][3] = ROR32(A_2_1[0][1], 4);
    A_2_2[1][4] = ROR32(A_2_1[3][1], 23);
    A_2_2[2][0] = ROR32(A_2_1[2][2], 11);
    A_2_2[2][1] = ROR32(A_2_1[0][2], 3);
    A_2_2[2][2] = ROR32(A_2_1[3][2], 25);
    A_2_2[2][3] = ROR32(A_2_1[1][2], 10);
    A_2_2[2][4] = ROR32(A_2_1[4][2], 7);
    A_2_2[3][0] = ROR32(A_2_1[3][3], 21);
    A_2_2[3][1] = ROR32(A_2_1[1][3], 13);
    A_2_2[3][2] = ROR32(A_2_1[4][3], 8);
    A_2_2[3][3] = ROR32(A_2_1[2][3], 15);
    A_2_2[3][4] = ROR32(A_2_1[0][3], 9);
    A_2_2[4][0] = ROR32(A_2_1[4][4], 14);
    A_2_2[4][1] = ROR32(A_2_1[2][4], 29);
    A_2_2[4][2] = ROR32(A_2_1[0][4], 18);
    A_2_2[4][3] = ROR32(A_2_1[3][4], 24);
    A_2_2[4][4] = ROR32(A_2_1[1][4], 2);

    //3rd round
    u32 A_3_0[5][5];
    for (int j = 0; j < 5; j++) {
        A_3_0[0][j] = A_2_2[0][j] ^ ((A_2_2[1][j] ^ 0xFFFFFFFF) & A_2_2[2][j]);
        A_3_0[1][j] = A_2_2[1][j] ^ ((A_2_2[2][j] ^ 0xFFFFFFFF) & A_2_2[3][j]);
        A_3_0[2][j] = A_2_2[2][j] ^ ((A_2_2[3][j] ^ 0xFFFFFFFF) & A_2_2[4][j]);
        A_3_0[3][j] = A_2_2[3][j] ^ ((A_2_2[4][j] ^ 0xFFFFFFFF) & A_2_2[0][j]);
        A_3_0[4][j] = A_2_2[4][j] ^ ((A_2_2[0][j] ^ 0xFFFFFFFF) & A_2_2[1][j]);
    }
    A_3_0[0][0] ^= RC2;

    u32 A_3_1[5][5];
    for (int j = 0; j < 5; j++) {
        A_3_1[0][j] = A_3_0[0][j] ^ A_3_0[4][0] ^ A_3_0[4][1] ^ A_3_0[4][2] ^ A_3_0[4][3] ^ A_3_0[4][4] ^
                      ROR32((A_3_0[1][0] ^ A_3_0[1][1] ^ A_3_0[1][2] ^ A_3_0[1][3] ^ A_3_0[1][4]), 1);
        A_3_1[1][j] = A_3_0[1][j] ^ A_3_0[0][0] ^ A_3_0[0][1] ^ A_3_0[0][2] ^ A_3_0[0][3] ^ A_3_0[0][4] ^
                      ROR32((A_3_0[2][0] ^ A_3_0[2][1] ^ A_3_0[2][2] ^ A_3_0[2][3] ^ A_3_0[2][4]), 1);
        A_3_1[2][j] = A_3_0[2][j] ^ A_3_0[1][0] ^ A_3_0[1][1] ^ A_3_0[1][2] ^ A_3_0[1][3] ^ A_3_0[1][4] ^
                      ROR32((A_3_0[3][0] ^ A_3_0[3][1] ^ A_3_0[3][2] ^ A_3_0[3][3] ^ A_3_0[3][4]), 1);
        A_3_1[3][j] = A_3_0[3][j] ^ A_3_0[2][0] ^ A_3_0[2][1] ^ A_3_0[2][2] ^ A_3_0[2][3] ^ A_3_0[2][4] ^
                      ROR32((A_3_0[4][0] ^ A_3_0[4][1] ^ A_3_0[4][2] ^ A_3_0[4][3] ^ A_3_0[4][4]), 1);
        A_3_1[4][j] = A_3_0[4][j] ^ A_3_0[3][0] ^ A_3_0[3][1] ^ A_3_0[3][2] ^ A_3_0[3][3] ^ A_3_0[3][4] ^
                      ROR32((A_3_0[0][0] ^ A_3_0[0][1] ^ A_3_0[0][2] ^ A_3_0[0][3] ^ A_3_0[0][4]), 1);
    }

    u32 A_3_2[5][5];
    A_3_2[0][0] = A_3_1[0][0];
    A_3_2[0][1] = ROR32(A_3_1[3][0], 28);
    A_3_2[0][2] = ROR32(A_3_1[1][0], 1);
    A_3_2[0][3] = ROR32(A_3_1[4][0], 27);
    A_3_2[0][4] = ROR32(A_3_1[2][0], 30);
    A_3_2[1][0] = ROR32(A_3_1[1][1], 12);
    A_3_2[1][1] = ROR32(A_3_1[4][1], 20);
    A_3_2[1][2] = ROR32(A_3_1[2][1], 6);
    A_3_2[1][3] = ROR32(A_3_1[0][1], 4);
    A_3_2[1][4] = ROR32(A_3_1[3][1], 23);
    A_3_2[2][0] = ROR32(A_3_1[2][2], 11);
    A_3_2[2][1] = ROR32(A_3_1[0][2], 3);
    A_3_2[2][2] = ROR32(A_3_1[3][2], 25);
    A_3_2[2][3] = ROR32(A_3_1[1][2], 10);
    A_3_2[2][4] = ROR32(A_3_1[4][2], 7);
    A_3_2[3][0] = ROR32(A_3_1[3][3], 21);
    A_3_2[3][1] = ROR32(A_3_1[1][3], 13);
    A_3_2[3][2] = ROR32(A_3_1[4][3], 8);
    A_3_2[3][3] = ROR32(A_3_1[2][3], 15);
    A_3_2[3][4] = ROR32(A_3_1[0][3], 9);
    A_3_2[4][0] = ROR32(A_3_1[4][4], 14);
    A_3_2[4][1] = ROR32(A_3_1[2][4], 29);
    A_3_2[4][2] = ROR32(A_3_1[0][4], 18);
    A_3_2[4][3] = ROR32(A_3_1[3][4], 24);
    A_3_2[4][4] = ROR32(A_3_1[1][4], 2);

    //4th round
    u32 A_4_0[5][5];
    for (int j = 0; j < 5; j++) {
        A_4_0[0][j] = A_3_2[0][j] ^ ((A_3_2[1][j] ^ 0xFFFFFFFF) & A_3_2[2][j]);
        A_4_0[1][j] = A_3_2[1][j] ^ ((A_3_2[2][j] ^ 0xFFFFFFFF) & A_3_2[3][j]);
        A_4_0[2][j] = A_3_2[2][j] ^ ((A_3_2[3][j] ^ 0xFFFFFFFF) & A_3_2[4][j]);
        A_4_0[3][j] = A_3_2[3][j] ^ ((A_3_2[4][j] ^ 0xFFFFFFFF) & A_3_2[0][j]);
        A_4_0[4][j] = A_3_2[4][j] ^ ((A_3_2[0][j] ^ 0xFFFFFFFF) & A_3_2[1][j]);
    }
    A_4_0[0][0] ^= RC3;

    u32 A_4_1[5][5];
    for (int j = 0; j < 5; j++) {
        A_4_1[0][j] = A_4_0[0][j] ^ A_4_0[4][0] ^ A_4_0[4][1] ^ A_4_0[4][2] ^ A_4_0[4][3] ^ A_4_0[4][4] ^
                      ROR32((A_4_0[1][0] ^ A_4_0[1][1] ^ A_4_0[1][2] ^ A_4_0[1][3] ^ A_4_0[1][4]), 1);
        A_4_1[1][j] = A_4_0[1][j] ^ A_4_0[0][0] ^ A_4_0[0][1] ^ A_4_0[0][2] ^ A_4_0[0][3] ^ A_4_0[0][4] ^
                      ROR32((A_4_0[2][0] ^ A_4_0[2][1] ^ A_4_0[2][2] ^ A_4_0[2][3] ^ A_4_0[2][4]), 1);
        A_4_1[2][j] = A_4_0[2][j] ^ A_4_0[1][0] ^ A_4_0[1][1] ^ A_4_0[1][2] ^ A_4_0[1][3] ^ A_4_0[1][4] ^
                      ROR32((A_4_0[3][0] ^ A_4_0[3][1] ^ A_4_0[3][2] ^ A_4_0[3][3] ^ A_4_0[3][4]), 1);
        A_4_1[3][j] = A_4_0[3][j] ^ A_4_0[2][0] ^ A_4_0[2][1] ^ A_4_0[2][2] ^ A_4_0[2][3] ^ A_4_0[2][4] ^
                      ROR32((A_4_0[4][0] ^ A_4_0[4][1] ^ A_4_0[4][2] ^ A_4_0[4][3] ^ A_4_0[4][4]), 1);
        A_4_1[4][j] = A_4_0[4][j] ^ A_4_0[3][0] ^ A_4_0[3][1] ^ A_4_0[3][2] ^ A_4_0[3][3] ^ A_4_0[3][4] ^
                      ROR32((A_4_0[0][0] ^ A_4_0[0][1] ^ A_4_0[0][2] ^ A_4_0[0][3] ^ A_4_0[0][4]), 1);
    }

    u32 A_4_2[5][5];
    A_4_2[0][0] = A_4_1[0][0];
    A_4_2[0][1] = ROR32(A_4_1[3][0], 28);
    A_4_2[0][2] = ROR32(A_4_1[1][0], 1);
    A_4_2[0][3] = ROR32(A_4_1[4][0], 27);
    A_4_2[0][4] = ROR32(A_4_1[2][0], 30);
    A_4_2[1][0] = ROR32(A_4_1[1][1], 12);
    A_4_2[1][1] = ROR32(A_4_1[4][1], 20);
    A_4_2[1][2] = ROR32(A_4_1[2][1], 6);
    A_4_2[1][3] = ROR32(A_4_1[0][1], 4);
    A_4_2[1][4] = ROR32(A_4_1[3][1], 23);
    A_4_2[2][0] = ROR32(A_4_1[2][2], 11);
    A_4_2[2][1] = ROR32(A_4_1[0][2], 3);
    A_4_2[2][2] = ROR32(A_4_1[3][2], 25);
    A_4_2[2][3] = ROR32(A_4_1[1][2], 10);
    A_4_2[2][4] = ROR32(A_4_1[4][2], 7);
    A_4_2[3][0] = ROR32(A_4_1[3][3], 21);
    A_4_2[3][1] = ROR32(A_4_1[1][3], 13);
    A_4_2[3][2] = ROR32(A_4_1[4][3], 8);
    A_4_2[3][3] = ROR32(A_4_1[2][3], 15);
    A_4_2[3][4] = ROR32(A_4_1[0][3], 9);
    A_4_2[4][0] = ROR32(A_4_1[4][4], 14);
    A_4_2[4][1] = ROR32(A_4_1[2][4], 29);
    A_4_2[4][2] = ROR32(A_4_1[0][4], 18);
    A_4_2[4][3] = ROR32(A_4_1[3][4], 24);
    A_4_2[4][4] = ROR32(A_4_1[1][4], 2);


    // set constraints
//    assert((A_4_2[0][0] & 0x000006B0) == 0x0);
//    assert((A_4_2[1][0] & 0x6B000000) == 0x4A000000);

    //MQ
//    assert((A_4_2[0][0] & 0x5E899101) == 0x54810100);
//    assert(((A_4_2[0][0] ^ A_4_2[2][0]) & 0xA176684E) == 0xA1060800);
//    assert((A_4_2[1][0] & 0x80C80000) == 0x00880000);
//    assert(((A_4_2[1][0] ^ A_4_2[3][0]) & 0x14370000) == 0x14010000);

    printf("constraint valid.\n");
    /*calculate MQ*/
    //ouput
    u32 A_5_0[5][5];
    for (int j = 0; j < 5; j++) {
        A_5_0[0][j] = A_4_2[0][j] ^ ((A_4_2[1][j] ^ 0xFFFFFFFF) & A_4_2[2][j]);
        A_5_0[1][j] = A_4_2[1][j] ^ ((A_4_2[2][j] ^ 0xFFFFFFFF) & A_4_2[3][j]);
        A_5_0[2][j] = A_4_2[2][j] ^ ((A_4_2[3][j] ^ 0xFFFFFFFF) & A_4_2[4][j]);
        A_5_0[3][j] = A_4_2[3][j] ^ ((A_4_2[4][j] ^ 0xFFFFFFFF) & A_4_2[0][j]);
        A_5_0[4][j] = A_4_2[4][j] ^ ((A_4_2[0][j] ^ 0xFFFFFFFF) & A_4_2[1][j]);
    }
    A_5_0[0][0] ^= RC4;

    uint32_t Hash[3];
    Hash[0] = A_5_0[0][0];
    Hash[1] = A_5_0[1][0];
    Hash[2] = A_5_0[2][0] & 0xFFFF0000;

    for (uint64_t i = 0; i < 3; i++)
        printf("Hash[%d]=0x%08x\n", i, Hash[i]);
}
